name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-publish:
    name: Build and Publish to Marketplace
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Verify version matches package.json
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        if [ "${{ steps.get_version.outputs.VERSION }}" != "$PACKAGE_VERSION" ]; then
          echo "Error: Tag version (${{ steps.get_version.outputs.VERSION }}) does not match package.json version ($PACKAGE_VERSION)"
          exit 1
        fi
    
    - name: Run pre-publish validation
      run: npm run validate
    
    - name: Build extension
      run: npm run build
    
    - name: Publish to VS Code Marketplace
      run: npm run publish:marketplace
      env:
        VSCE_PAT: ${{ secrets.VSCE_PAT }}
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*.vsix
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload VSIX to release
      uses: actions/upload-artifact@v4
      with:
        name: vsix-release-${{ steps.get_version.outputs.VERSION }}
        path: dist/*.vsix
        retention-days: 90

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: build-and-publish
    if: success()
    
    steps:
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Send success notification
      run: |
        echo "âœ… Successfully published version ${{ steps.get_version.outputs.VERSION }} to VS Code Marketplace"
